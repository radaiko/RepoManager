name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.0.1)'
        required: true
        type: string

permissions:
  contents: write  # Required for creating releases, commits, and pushes

jobs:
  update-pubspec:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.update.outputs.commit_sha }}
    steps:
      - name: Checkout code at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0

      - name: Update pubspec.yaml version
        id: update
        run: |
          TAG=${{ inputs.tag }}
          # Remove 'v' prefix if present (e.g., v1.0.1 -> 1.0.1)
          VERSION=${TAG#v}
          sed -i "s/version: .*/version: $VERSION/" pubspec.yaml
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pubspec.yaml
          git commit -m "Update pubspec.yaml to version $VERSION for tag $TAG"
          git push
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        shell: bash

      - name: Debug pubspec.yaml
        run: cat pubspec.yaml
        shell: bash

  build-windows:
    runs-on: windows-latest
    needs: update-pubspec
    steps:
      - name: Checkout code at updated commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.update-pubspec.outputs.commit_sha }}  # Use updated commit

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Use the latest stable version

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: |
          flutter build windows --release

      - name: Package artifact
        run: |
          mkdir -p release
          cp -R build/windows/x64/runner/Release/repo_manager.exe release/
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: release/repo_manager.exe
          retention-days: 1

  build-macos:
    runs-on: macos-latest
    needs: update-pubspec
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code at updated commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.update-pubspec.outputs.commit_sha }}  # Use updated commit

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Use the latest stable version

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: |
          flutter build macos --release

      - name: Package artifact
        run: |
          mkdir -p release
          cp -R "build/macos/Build/Products/Release/Repo Manager.app" release/
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: release/Repo Manager.app
          retention-days: 1

      - name: Generate changelog
        id: changelog
        run: |
          # Try to get the previous tag (excluding the input tag)
          CURRENT_TAG=${{ inputs.tag }}
          LATEST_TAG=$(git describe --tags --abbrev=0 --exclude $CURRENT_TAG 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # No previous tags, get all commits up to current tag
            CHANGELOG=$(git log --pretty="* %s (%h)" $CURRENT_TAG)
          else
            # Get commits between last tag and current tag
            CHANGELOG=$(git log --pretty="* %s (%h)" $LATEST_TAG..$CURRENT_TAG)
          fi
          # Escape newlines for GitHub output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: release

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: release

      - name: Debug release directory contents
        run: |
          ls -R release
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          name: Release ${{ inputs.tag }}
          body: |
            ## Changes
            ${{ needs.build-macos.outputs.changelog }}

            ## Artifacts
            - Windows: repo_manager.exe
            - macOS: Repo Manager.app
          files: |
            release/repo_manager.exe
            release/Repo\ Manager.app
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
