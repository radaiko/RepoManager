name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Required for creating releases, commits, and tags

jobs:
  generate-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      - name: Generate tag identifier
        id: generate-tag
        run: |
          # Use run number for simple versioning, e.g., v1, v2, etc.
          TAG="v${{ github.run_number }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
        shell: bash

  update-pubspec:
    runs-on: ubuntu-latest
    needs: generate-tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update pubspec.yaml version
        run: |
          TAG=${{ needs.generate-tag.outputs.tag }}
          VERSION=${TAG#v}  # Remove 'v' prefix, e.g., v1 -> 1
          sed -i "s/version: .*/version: $VERSION/" pubspec.yaml
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pubspec.yaml
          git commit -m "Update pubspec.yaml to version $VERSION"
          git push
        shell: bash

  build-windows:
    runs-on: windows-latest
    needs: update-pubspec
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for commit log

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Use the latest stable version

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: |
          flutter build windows --release

      - name: Package artifact
        run: |
          mkdir -p release
          cp -R build/windows/x64/runner/Release/repo_manager.exe release/
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: release/repo_manager.exe
          retention-days: 1

  build-macos:
    runs-on: macos-latest
    needs: update-pubspec
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for commit log

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Use the latest stable version

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: |
          flutter build macos --release

      - name: Package artifact
        run: |
          mkdir -p release
          cp -R "build/macos/Build/Products/Release/Repo Manager.app" release/
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: release/Repo Manager.app
          retention-days: 1

      - name: Generate changelog
        id: changelog
        run: |
          # Try to get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, get all commits
            CHANGELOG=$(git log --pretty="* %s (%h)")
          else
            # Get commits since the last tag
            CHANGELOG=$(git log --pretty="* %s (%h)" $LATEST_TAG..HEAD)
          fi
          # Escape newlines for GitHub output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

  tag-commit:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          TAG=${{ needs.generate-tag.outputs.tag }}
          git tag $TAG
          git push origin $TAG
        shell: bash

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, tag-commit]
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: release

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: release

      - name: Debug release directory contents
        run: |
          ls -R release
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate-tag.outputs.tag }}
          name: Release ${{ needs.generate-tag.outputs.tag }}
          body: |
            ## Changes
            ${{ needs.build-macos.outputs.changelog }}

            ## Artifacts
            - Windows: repo_manager.exe
            - macOS: Repo Manager.app
          files: |
            release/repo_manager.exe
            release/Repo\ Manager.app
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
