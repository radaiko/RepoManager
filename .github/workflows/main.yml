name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Required for creating releases

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for commit log

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Use the latest stable version

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: |
          flutter build windows --release

      - name: Package artifact
        run: |
          mkdir -p release
          cp -R build/windows/runner/Release/repo_manager.exe release/
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: release/repo_manager.exe
          retention-days: 1

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for commit log

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Use the latest stable version

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: |
          flutter build macos --release

      - name: Package artifact
        run: |
          mkdir -p release
          cp -R "build/macos/Build/Products/Release/Repo Manager.app" release/
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: release/Repo Manager.app
          retention-days: 1

      - name: Generate changelog
        id: changelog
        run: |
          # Try to get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, get all commits
            CHANGELOG=$(git log --pretty="* %s (%h)")
          else
            # Get commits since the last tag
            CHANGELOG=$(git log --pretty="* %s (%h)" $LATEST_TAG..HEAD)
          fi
          # Escape newlines for GitHub output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]  # Wait for both build jobs to complete
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: release

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path:
